def mock():
    mock_starter_message = "This is mock data. Thank you for your interest in joining Cohere as a Software Engineer. Based on your resume, I can see that you have experience in various programming languages such as Python, Typescript, and Rust. One of our key focuses at Cohere is AI and NLP, so my question to you is: \n\nCan you discuss a project from your resume where you utilized your skills in Python and Typescript to work on an AI-integrated productivity visualization workspace with the Cohere API?"
    
    mock_evaluation_message = "Strengths:\n- The mock data response provides a clear and concise overview of the technologies used in the project, including Python, Django, Typescript, React, and MongoDB.\n- The applicant highlights the specific uses of each technology, such as Python for backend development and Django for server-side logic.\n\nAreas for Improvement:\n- The response does not directly address the question about the integration of AI technology and the benefits it brought to the productivity visualization workspace. It would be helpful to provide more specific information about how AI was incorporated into the project and how it enhanced productivity visualization.\n- It would also be beneficial to mention any specific challenges faced in integrating AI and how they were overcome."

    mock_ordered_content = "Mock Projects\n•\nProjects > seePickle Typescript, Next.js, Python, MongoDB\n◦ Created an AI-integrated productivity visualization workspace with the Cohere API.\nProjects > seePickle Typescript, Next.js, Python, MongoDB\n•\nProjects > seePickle Typescript, Next.js, Python, MongoDB\n• Vcsualizer Typescript, Next.js, Recharts\nProjects > seePickle Typescript, Next.js, Python, MongoDB\n• Financial Portfolio Flask, SQLite\n\n◦ Youth Ambassadors: Co-founded an initiative directed towards communal youth development, career opportunities, and post-secondary research.\nProjects > seePickle Typescript, Next.js, Python, MongoDB\n◦ Leveraged the retrieval-augmented generation framework to improve the quality of LLM-generated insights and reduce hallucinations.\nProjects > seePickle Typescript, Next.js, Python, MongoDB\n◦ Developed CRUD endpoints with MongoDB and state management with React.\nImplemented Auth0 to safeguard routes, resulting in seamless customer management.\nProjects > seePickle Typescript, Next.js, Python, MongoDB\n◦ Developed server-side functionalities with Flask for account creation, authentication, and login.\nDeveloped CRUD endpoints with SQL enabling users to lookup/buy/sell stocks, and view transaction history.\n\n◦ Website Migration: Collaborated with the developer team to transition the website from Wix to Vercel, improving project scalability for future development.\n\n◦ WebDriver Testing Application: Developed a scalable front-end project to automate client-to-site interactions using the Selenium and TestNG frameworks.\n\n | Dan Li | Email : d22li@uwaterloo.ca\n | Github | Mobile : +1-647-675-6975\n | Education • University of Waterloo | Waterloo, ON\n | Bachelor of Applied Science - BASc, Computer Engineering | Sept 2022 – Apr 2027\n | Experience • Onlia Insurance | Toronto, ON\n | Automation Developer | May 2023 - Aug 2023\n\nProjects > seePickle Typescript, Next.js, Python, MongoDB > Adjusted Cost Base Stock Reporting Application C++\n◦ Refined application memory management by developing safe pointer deletion strategies, maintaining memory leak probabilities at a rate below 7%.\n\n | • BrightBearsInfo | Toronto, ON\n | Marketing Lead and Web Developer Assistant | Feb 2022 - Sept 2022\n\nProjects > seePickle Typescript, Next.js, Python, MongoDB\n◦ Created a portfolio template that utilizes the Github GraphQL API to synchronize real-time account changes with the website.\n\n◦ Policy Binding Application: Configured and ran a back-end project to perform integration tests for policy binding and account activation services.\nProjects > seePickle Typescript, Next.js, Python, MongoDB\n◦ Developed analysis and visualization of public contribution data, by parsing JSON responses into TypeScript objects for component rendering.\nProjects > seePickle Typescript, Next.js, Python, MongoDB\n◦ Created a portfolio application to simulate real-time stock market transactions with the Yahoo Finance API.\n\n◦ Data Retrieval: Developed a SOAP web service to retrieve policy data for binding and activation; enhanced program-to-database communication efficiency by utilizing the JDBC API with PostgreSQL.\n\n◦ File Writing: Configured Excel writing capabilities with Apache POI to generate spreadsheets of activated accounts for automated testing usage, resulting in a 23% increase in QA resources.\n\n◦ Reporting: Refined WebDriver exception handling capabilities, resulting in a 15% reduction in the occurrence of incorrect pass-fail reporting instances.\nProjects > seePickle Typescript, Next.js, Python, MongoDB > Adjusted Cost Base Stock Reporting Application C++\n◦ Created a CLI application to sort and display financial transaction data with the insertion sort algorithm.\nOptimized the scalability of file input by implementing data parsing into a linked list structure.\n\n◦ Test Optimization: Implemented Java interfaces to add an extensible automation framework for simulating intricate user flows, resulting in a 38% increase in test coverage and a 26% reduction in manual QA workload.\nProgramming Skills\nLanguages: Python, Javascript, Typescript, C, C++, SQL, Java, Bash Tools and Databases: Git, Docker, Linux, MongoDB, PostgreSQL Frameworks and Libraries: Flask, Django, FastAPI, Next.js, Selenium WebDriver, React.js, NumPy, Pandas, End of mock data"

    return {
        "starter_message": mock_starter_message,
        "evaluation_message": mock_evaluation_message,
        "ordered_content": mock_ordered_content
    }


